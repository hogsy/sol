================================

	ARENA SCRIPTING
	
================================

KMQuake2 0.20u8 supports loading Quake3-style .arena files, both from inside pak/pk3 files, and from
loose files outside of paks.

The name of the script file is the same as the bsp it contains information for, but with a .arena extension.
For example, the arena script for highlandcastle_b3.bsp is named highlandcastle_b3.arena.

Here's an example of an arena script for this map:

{
map				"highlandcastle_b3"
longname		"Castle in the Highlands"
type			"dm teamdm"
}

This script specifies that the name of the .bsp file to load is highlandcastle_b3.bsp, the map title to display
in the start server menu is "Castle in the Highlands", and the game mode supported is deathmatch.

The start server menu's maplist is filtered by the currently selected gametype.  Here are the valid type tokens:
	Deathmatch:		dm teamdm ffa team
	Cooperative:	coop
	CTF:			ctf
	3Team CTF:		3tctf
	
================================

	MODINFO SCRIPTING
	
================================

KMQuake2 0.20u8 features a Mods menu that allows in-game switching of the loaded mod or gamedir, without
overwriting settings or key binds.

This menu also reads info on each mod from a text file named modinfo.def, located inside the game folder for
each mod.

Here's an example of a modinfo script:

modInfo
{
	title		"Meadow Rumble II: Revenge of the Ovinomancer"
	gameDir		"mwrumble2"
	baseGame	"xatrix"
	baseGame2	"rogue"
	baseGame3	"zaero"
	quakeImportPathAuto "1"
	quakeRRImportPathAuto "1"
	quakeImportPath "D:\Quake"
	quakeMainGame	"id1"
	quakeGame1		"hipnotic"
	quakeGame2		"rogue"
	quakeGame3		"nehahra"
	quakeGame4		"ad"
}

This script specifies that that the title of the mod is "Meadow Rumble II: Revenge of the Ovinomancer",
that the game folder for the mod is named mwrumble2, and that this mod mounts the xatrix, rogue, and zaero game folders.
The latter is done by the menu internally setting the basegame, basegame2, and basegame3 cvars.
It also mounts pak files in the id1, hipnotic, rogue, nehahra, and ad folders under the Quake import path.
For the Quake import path, it will first try to find the the Quake re-release Steam install path.
If it can't find the Quake re-release Steam install path, it will then try to find the original Quake Steam install path.
If it can't find the original Quake Steam install path, it will then use the path D:\Quake as the Quake import path.

================================

	PAK REMAP LIST SCRIPTING

================================

KMQuake2 0.20u8 supports remapping pak files under the Quake import path.  Only pak files are mounted, and
only pak items that are remapped will load from those paks.  The other pak items are ignored.

The pak remap list is loaded from a separate script for each folder under the Quake import path.  This file
is named <quake_gamedir>_pakremap.def.  For example, the paks under the id1 folder are remapped using a script
called id1_pakremap.def.  This script must be located inside the game folder for the mod using it.  It must be
a loose file, it cannot be loaded from a pak or pk3 file.

Here's an example of an id1_pakremap.def script for mounting the paks in the id1 folder:

pakRemapList
{
	{ "progs/gib1.mdl" "models/objects/q1gibs/q1gib1/tris.md2" }
	{ "progs/gib2.mdl" "models/objects/q1gibs/q1gib2/tris.md2" }
	{ "progs/gib3.mdl" "models/objects/q1gibs/q1gib3/tris.md2" }
	{ "progs/shambler.mdl" "models/monsters/q1shambler/tris.md2" }
	{ "progs/h_shams.mdl" "models/monsters/q1shambler/head/tris.md2" }
	{ "progs/s_light.mdl" "models/monsters/q1shambler/s_light/tris.md2" }
	{ "sound/player/udeath.wav" "sound/q1player/udeath.wav" }
	{ "sound/shambler/melee1.wav" "sound/q1shambler/melee1.wav" }
	{ "sound/shambler/melee2.wav" "sound/q1shambler/melee2.wav" }
	{ "sound/shambler/sattck1.wav" "sound/q1shambler/sattck1.wav" }
	{ "sound/shambler/sboom.wav" "sound/q1shambler/sboom.wav" }
	{ "sound/shambler/sdeath.wav" "sound/q1shambler/sdeath.wav" }
	{ "sound/shambler/shurt2.wav" "sound/q1shambler/shurt2.wav" }
	{ "sound/shambler/sidle.wav" "sound/q1shambler/sidle.wav" }
	{ "sound/shambler/smack.wav" "sound/q1shambler/smack.wav" }
	{ "sound/shambler/ssight.wav" "sound/q1shambler/ssight.wav" }
}

This pak remap script remaps the models and sounds used by the Shambler, including gibs and the lightning bolt
attachement.

The remap script parser will output any errors it encounters.  This output from filesystem initialization is not visible in the in-game console.  So you will need to start KMQuake2 in dedicated mode to see if the script was correctly
parsed.  Here's an example of such output:

Loaded 267 pak remaps from file ./gamedir/id1_pakremap.def
Remapped 214 items in pak D:\Quake/id1/pak0.pak
Remapped 53 items in pak D:\Quake/id1/pak1.pak

If the total number of remapped items in all paks in the mounted gamedir does not match the number of pak remaps
in the script, then one of the remaps is misspelled.  In which case the filesystem will output a message:

Pak remap orgName gfx/palete.lmp in ./gamedir/id1_pakremap.def was not found in any paks

Check the spelling of the remap against the contents of the gamedir's paks to correct it.

================================

	KEYBIND LIST SCRIPTING

================================

KMQuake2 0.20u8 features a new key binding menu with a scrolling list, allowing a large number of keys to be
bound.  This menu supports loading its list of key binds from a filenamed scripts/ui/keybinds.def.

Here's an example of a keybind list file:

keyBindList
{
	// Basic Q2 binds
	keyBind
	{
		commandName "+attack"
		displayName "Attack"
	}
	keyBind
	{
		commandName "+attack2"
		displayName "Alternate Attack"
	}
	keyBind
	{
		commandName "+use"
		displayName "Activate"
	}
	.
	.
	.
}

The file opens with the identifier "keyBindList", followed by a left curly brace.  It is terminated at the end
of the list with a right curly brace.

Individual key binds are opened with the identifier "keyBind", followed with another left curly brace, and they are
closed with a right curly brace.  Each key bind has two values- a "commandName" that sets the command to bind,
and a "displayName" that sets the name displayed in the key bind menu.

Lines starting with a "//" are comments that are ignored.

The dots represent additional keybinds that can be added.  There is no limit on the number of key binds that can
be placed in this file.
